#!/bin/bash

set -e
set -x

script_path=$(readlink -f $0)
base_dir=$(dirname $script_path)
work_dir=$base_dir/work
rootfs_dir=$base_dir/rootfs
n_jobs=8

unpack_toolchain() {
    pushd $work_dir
    if [ ! -d x-tools7h ]; then
        curl http://archlinuxarm.org/builder/xtools/x-tools7h.tar.xz | tar xJ
    fi
    popd
}

unpack_rootfs() {
    local file_name=rootfs-armv7-1.tar.xz

    if [ ! -d $rootfs_dir ]; then
        mkdir -p $rootfs_dir

        pushd $work_dir
        curl -L -o $file_name http://sugarlabs.org/~dnarvaez/archxo/$file_name
        popd

        pushd $rootfs_dir
        tar xfJ $work_dir/$file_name
        rm -rf boot lib/modules
        popd
    fi
}

build_kernel() {
    local target=arm-unknown-linux-gnueabi

    pushd $work_dir

    if [ ! -d olpc-kernel ]; then
        git clone --depth=1 git://dev.laptop.org/olpc-kernel -b arm-3.0-wip
    fi

    cd olpc-kernel

    local orig_path=$PATH

    export ARCH=arm
    export CROSS_COMPILE=$target-
    export PATH=$PATH:$work_dir/x-tools7h/$target/bin

    make xo_175_defconfig

    local to_enable=(CONFIG_UTS_NS CONFIG_IPC_NS CONFIG_USER_NS CONFIG_PID_NS
                     CONFIG_NET_NS)
    for option in "${to_enable[@]}"
    do
        sed -i "s/# $option is not set/$option=y/g" .config
    done

    make  -j$n_jobs zImage

    cp arch/arm/boot/zImage $work_dir

    make -j$n_jobs modules

    INSTALL_MOD_STRIP=1 INSTALL_MOD_PATH=$work_dir \
        make modules_install

    unset ARCH CROSS_COMPILE

    PATH=$orig_path

    popd
}

tweak_rootfs() {
    mkdir -p $rootfs_dir/boot

    cp $work_dir/zImage $rootfs_dir/boot
    cp -r $work_dir/lib/modules $rootfs_dir/lib

    cp $work_dir/initrd.img $rootfs_dir/boot

    cat > $rootfs_dir/boot/olpc.fth <<EOF
\\ OLPC XO-1.75 boot script

: olpc-fth-boot-me
   " rw console=ttyS2,115200 console=tty0 " to boot-file
   " u:\\boot\\zImage" to boot-device
   " u:\\boot\\initrd.img" to ramdisk
   visible
   boot
;

olpc-fth-boot-me
EOF
}

build_initramfs() {
    pushd $work_dir

    rm -rf initramfs
    mkdir initramfs
    cd initramfs

    mkdir bin sbin etc proc sys newroot
    mkdir -p usr/{bin,sbin,etc,proc,sys,newroot,usr/bin}

    touch etc/mdev.conf

    curl -o bin/busybox \
        http://busybox.net/downloads/binaries/latest/busybox-armv7l

    chmod +x bin/busybox
    ln -s busybox bin/sh

    cat > init <<EOF
#!/bin/sh

/bin/busybox --install -s

mount -t proc proc /proc
mount -t sysfs sysfs /sys

mknod /dev/null c 1 3
mknod /dev/tty c 5 0
mknod /dev/sda b 8 0
mdev -s

until mount /dev/sda /newroot
do
    echo "Could not mount usb device, retrying in 1 second"
    sleep 1
done

exec switch_root /newroot /sbin/init
EOF

    chmod +x init

    find . | cpio -H newc -o > $work_dir/initrd.img

    popd
}

pack_rootfs() {
    pushd rootfs
    tar cfJ $base_dir/rootfs.tar.xz *
    popd
}

cleanup() {
    rm -rf rootfs work
}

usage() {
  echo "Usage: mkos %s [options]"
  echo
  echo "Options:"
  echo "  -c    Clean up the work files"
}

inside_chroot=false

while getopts 'fch' flag; do
    case $flag in
        h)
            usage
            exit
            ;;
        c)
            cleanup
            ;;
        f)
            inside_chroot=true
            ;;
    esac
done

mkdir -p $work_dir

if $inside_chroot; then
    unpack_rootfs
    tweak_rootfs
    pack_rootfs
else
    unpack_toolchain
    build_kernel
    build_initramfs

    fakeroot -- $0 -f
fi
